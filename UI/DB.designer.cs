#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MainDatabase")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertItem_rating(Item_rating instance);
    partial void UpdateItem_rating(Item_rating instance);
    partial void DeleteItem_rating(Item_rating instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertUser_Login(User_Login instance);
    partial void UpdateUser_Login(User_Login instance);
    partial void DeleteUser_Login(User_Login instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    #endregion
		
		public DBDataContext() : 
				base(global::UI.Properties.Settings.Default.MainDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Item_rating> Item_ratings
		{
			get
			{
				return this.GetTable<Item_rating>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<User_Login> User_Logins
		{
			get
			{
				return this.GetTable<User_Login>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_id;
		
		private System.Nullable<int> _Country_id;
		
		private string _City;
		
		private string _Street;
		
		private string _House;
		
		private string _Postal_code;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_idChanging(int value);
    partial void OnCustomer_idChanged();
    partial void OnCountry_idChanging(System.Nullable<int> value);
    partial void OnCountry_idChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnHouseChanging(string value);
    partial void OnHouseChanged();
    partial void OnPostal_codeChanging(string value);
    partial void OnPostal_codeChanged();
    #endregion
		
		public Address()
		{
			this._Country = default(EntityRef<Country>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Customer_id
		{
			get
			{
				return this._Customer_id;
			}
			set
			{
				if ((this._Customer_id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_idChanging(value);
					this.SendPropertyChanging();
					this._Customer_id = value;
					this.SendPropertyChanged("Customer_id");
					this.OnCustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_id", DbType="Int")]
		public System.Nullable<int> Country_id
		{
			get
			{
				return this._Country_id;
			}
			set
			{
				if ((this._Country_id != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_idChanging(value);
					this.SendPropertyChanging();
					this._Country_id = value;
					this.SendPropertyChanged("Country_id");
					this.OnCountry_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="VarChar(50)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_House", DbType="VarChar(50)")]
		public string House
		{
			get
			{
				return this._House;
			}
			set
			{
				if ((this._House != value))
				{
					this.OnHouseChanging(value);
					this.SendPropertyChanging();
					this._House = value;
					this.SendPropertyChanged("House");
					this.OnHouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postal_code", DbType="VarChar(50)")]
		public string Postal_code
		{
			get
			{
				return this._Postal_code;
			}
			set
			{
				if ((this._Postal_code != value))
				{
					this.OnPostal_codeChanging(value);
					this.SendPropertyChanging();
					this._Postal_code = value;
					this.SendPropertyChanged("Postal_code");
					this.OnPostal_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Country", ThisKey="Country_id", OtherKey="Country_id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._Country_id = value.Country_id;
					}
					else
					{
						this._Country_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Address", Storage="_Customer", ThisKey="Customer_id", OtherKey="Customer_id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Addresses = null;
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Addresses = this;
						this._Customer_id = value.Customer_id;
					}
					else
					{
						this._Customer_id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Category_id;
		
		private string _Category_name;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategory_idChanging(int value);
    partial void OnCategory_idChanged();
    partial void OnCategory_nameChanging(string value);
    partial void OnCategory_nameChanged();
    #endregion
		
		public Category()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Category_id
		{
			get
			{
				return this._Category_id;
			}
			set
			{
				if ((this._Category_id != value))
				{
					this.OnCategory_idChanging(value);
					this.SendPropertyChanging();
					this._Category_id = value;
					this.SendPropertyChanged("Category_id");
					this.OnCategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_name", DbType="VarChar(50)")]
		public string Category_name
		{
			get
			{
				return this._Category_name;
			}
			set
			{
				if ((this._Category_name != value))
				{
					this.OnCategory_nameChanging(value);
					this.SendPropertyChanging();
					this._Category_name = value;
					this.SendPropertyChanged("Category_name");
					this.OnCategory_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item", Storage="_Items", ThisKey="Category_id", OtherKey="Category_id")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Country_id;
		
		private string _Country_name;
		
		private System.Nullable<int> _Region_id;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountry_idChanging(int value);
    partial void OnCountry_idChanged();
    partial void OnCountry_nameChanging(string value);
    partial void OnCountry_nameChanged();
    partial void OnRegion_idChanging(System.Nullable<int> value);
    partial void OnRegion_idChanged();
    #endregion
		
		public Country()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Country_id
		{
			get
			{
				return this._Country_id;
			}
			set
			{
				if ((this._Country_id != value))
				{
					this.OnCountry_idChanging(value);
					this.SendPropertyChanging();
					this._Country_id = value;
					this.SendPropertyChanged("Country_id");
					this.OnCountry_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_name", DbType="VarChar(50)")]
		public string Country_name
		{
			get
			{
				return this._Country_name;
			}
			set
			{
				if ((this._Country_name != value))
				{
					this.OnCountry_nameChanging(value);
					this.SendPropertyChanging();
					this._Country_name = value;
					this.SendPropertyChanged("Country_name");
					this.OnCountry_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region_id", DbType="Int")]
		public System.Nullable<int> Region_id
		{
			get
			{
				return this._Region_id;
			}
			set
			{
				if ((this._Region_id != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegion_idChanging(value);
					this.SendPropertyChanging();
					this._Region_id = value;
					this.SendPropertyChanged("Region_id");
					this.OnRegion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Address", Storage="_Addresses", ThisKey="Country_id", OtherKey="Country_id")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Country", Storage="_Region", ThisKey="Region_id", OtherKey="Region_id", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._Region_id = value.Region_id;
					}
					else
					{
						this._Region_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item_rating")]
	public partial class Item_rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Item_id;
		
		private System.Nullable<double> _Item_rating1;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItem_idChanging(int value);
    partial void OnItem_idChanged();
    partial void OnItem_rating1Changing(System.Nullable<double> value);
    partial void OnItem_rating1Changed();
    #endregion
		
		public Item_rating()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Item_id
		{
			get
			{
				return this._Item_id;
			}
			set
			{
				if ((this._Item_id != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_idChanging(value);
					this.SendPropertyChanging();
					this._Item_id = value;
					this.SendPropertyChanged("Item_id");
					this.OnItem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Item_rating", Storage="_Item_rating1", DbType="Float")]
		public System.Nullable<double> Item_rating1
		{
			get
			{
				return this._Item_rating1;
			}
			set
			{
				if ((this._Item_rating1 != value))
				{
					this.OnItem_rating1Changing(value);
					this.SendPropertyChanging();
					this._Item_rating1 = value;
					this.SendPropertyChanged("Item_rating1");
					this.OnItem_rating1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Item_rating", Storage="_Item", ThisKey="Item_id", OtherKey="Item_id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Item_ratings.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Item_ratings.Add(this);
						this._Item_id = value.Item_id;
					}
					else
					{
						this._Item_id = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Oider_id;
		
		private System.Nullable<int> _Buyer_id;
		
		private System.Nullable<int> _Seller_id;
		
		private System.Nullable<int> _Item_id;
		
		private System.Nullable<double> _Quantity;
		
		private System.Nullable<System.DateTime> _Order_date;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOider_idChanging(int value);
    partial void OnOider_idChanged();
    partial void OnBuyer_idChanging(System.Nullable<int> value);
    partial void OnBuyer_idChanged();
    partial void OnSeller_idChanging(System.Nullable<int> value);
    partial void OnSeller_idChanged();
    partial void OnItem_idChanging(System.Nullable<int> value);
    partial void OnItem_idChanged();
    partial void OnQuantityChanging(System.Nullable<double> value);
    partial void OnQuantityChanged();
    partial void OnOrder_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrder_dateChanged();
    #endregion
		
		public Order()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Oider_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Oider_id
		{
			get
			{
				return this._Oider_id;
			}
			set
			{
				if ((this._Oider_id != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOider_idChanging(value);
					this.SendPropertyChanging();
					this._Oider_id = value;
					this.SendPropertyChanged("Oider_id");
					this.OnOider_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Buyer_id", DbType="Int")]
		public System.Nullable<int> Buyer_id
		{
			get
			{
				return this._Buyer_id;
			}
			set
			{
				if ((this._Buyer_id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyer_idChanging(value);
					this.SendPropertyChanging();
					this._Buyer_id = value;
					this.SendPropertyChanged("Buyer_id");
					this.OnBuyer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seller_id", DbType="Int")]
		public System.Nullable<int> Seller_id
		{
			get
			{
				return this._Seller_id;
			}
			set
			{
				if ((this._Seller_id != value))
				{
					this.OnSeller_idChanging(value);
					this.SendPropertyChanging();
					this._Seller_id = value;
					this.SendPropertyChanged("Seller_id");
					this.OnSeller_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_id", DbType="Int")]
		public System.Nullable<int> Item_id
		{
			get
			{
				return this._Item_id;
			}
			set
			{
				if ((this._Item_id != value))
				{
					this.OnItem_idChanging(value);
					this.SendPropertyChanging();
					this._Item_id = value;
					this.SendPropertyChanged("Item_id");
					this.OnItem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Float")]
		public System.Nullable<double> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Order_date
		{
			get
			{
				return this._Order_date;
			}
			set
			{
				if ((this._Order_date != value))
				{
					this.OnOrder_dateChanging(value);
					this.SendPropertyChanging();
					this._Order_date = value;
					this.SendPropertyChanged("Order_date");
					this.OnOrder_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="Buyer_id", OtherKey="Customer_id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders = null;
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders = this;
						this._Buyer_id = value.Customer_id;
					}
					else
					{
						this._Buyer_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Order", Storage="_Item", ThisKey="Oider_id", OtherKey="Item_id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Orders = null;
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Orders = this;
						this._Oider_id = value.Item_id;
					}
					else
					{
						this._Oider_id = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Region_id;
		
		private string _Region_name;
		
		private EntitySet<Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegion_idChanging(int value);
    partial void OnRegion_idChanged();
    partial void OnRegion_nameChanging(string value);
    partial void OnRegion_nameChanged();
    #endregion
		
		public Region()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Region_id
		{
			get
			{
				return this._Region_id;
			}
			set
			{
				if ((this._Region_id != value))
				{
					this.OnRegion_idChanging(value);
					this.SendPropertyChanging();
					this._Region_id = value;
					this.SendPropertyChanged("Region_id");
					this.OnRegion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region_name", DbType="VarChar(50)")]
		public string Region_name
		{
			get
			{
				return this._Region_name;
			}
			set
			{
				if ((this._Region_name != value))
				{
					this.OnRegion_nameChanging(value);
					this.SendPropertyChanging();
					this._Region_name = value;
					this.SendPropertyChanged("Region_name");
					this.OnRegion_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Country", Storage="_Countries", ThisKey="Region_id", OtherKey="Region_id")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Login")]
	public partial class User_Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_id;
		
		private string _Pass;
		
		private string _User_type;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnUser_typeChanging(string value);
    partial void OnUser_typeChanged();
    #endregion
		
		public User_Login()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(50)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_type", DbType="VarChar(50)")]
		public string User_type
		{
			get
			{
				return this._User_type;
			}
			set
			{
				if ((this._User_type != value))
				{
					this.OnUser_typeChanging(value);
					this.SendPropertyChanging();
					this._User_type = value;
					this.SendPropertyChanged("User_type");
					this.OnUser_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_User_Login", Storage="_Customer", ThisKey="User_id", OtherKey="Customer_id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.User_Logins.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.User_Logins.Add(this);
						this._User_id = value.Customer_id;
					}
					else
					{
						this._User_id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_id;
		
		private string _Customer_name;
		
		private string _Email;
		
		private string _Phone_number;
		
		private string _Customer_type;
		
		private string _Image_path;
		
		private EntityRef<Address> _Addresses;
		
		private EntityRef<Order> _Orders;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<User_Login> _User_Logins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_idChanging(int value);
    partial void OnCustomer_idChanged();
    partial void OnCustomer_nameChanging(string value);
    partial void OnCustomer_nameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhone_numberChanging(string value);
    partial void OnPhone_numberChanged();
    partial void OnCustomer_typeChanging(string value);
    partial void OnCustomer_typeChanged();
    partial void OnImage_pathChanging(string value);
    partial void OnImage_pathChanged();
    #endregion
		
		public Customer()
		{
			this._Addresses = default(EntityRef<Address>);
			this._Orders = default(EntityRef<Order>);
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._User_Logins = new EntitySet<User_Login>(new Action<User_Login>(this.attach_User_Logins), new Action<User_Login>(this.detach_User_Logins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Customer_id
		{
			get
			{
				return this._Customer_id;
			}
			set
			{
				if ((this._Customer_id != value))
				{
					this.OnCustomer_idChanging(value);
					this.SendPropertyChanging();
					this._Customer_id = value;
					this.SendPropertyChanged("Customer_id");
					this.OnCustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_name", DbType="VarChar(50)")]
		public string Customer_name
		{
			get
			{
				return this._Customer_name;
			}
			set
			{
				if ((this._Customer_name != value))
				{
					this.OnCustomer_nameChanging(value);
					this.SendPropertyChanging();
					this._Customer_name = value;
					this.SendPropertyChanged("Customer_name");
					this.OnCustomer_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_number", DbType="VarChar(50)")]
		public string Phone_number
		{
			get
			{
				return this._Phone_number;
			}
			set
			{
				if ((this._Phone_number != value))
				{
					this.OnPhone_numberChanging(value);
					this.SendPropertyChanging();
					this._Phone_number = value;
					this.SendPropertyChanged("Phone_number");
					this.OnPhone_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_type", DbType="VarChar(50)")]
		public string Customer_type
		{
			get
			{
				return this._Customer_type;
			}
			set
			{
				if ((this._Customer_type != value))
				{
					this.OnCustomer_typeChanging(value);
					this.SendPropertyChanging();
					this._Customer_type = value;
					this.SendPropertyChanged("Customer_type");
					this.OnCustomer_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_path", DbType="VarChar(50)")]
		public string Image_path
		{
			get
			{
				return this._Image_path;
			}
			set
			{
				if ((this._Image_path != value))
				{
					this.OnImage_pathChanging(value);
					this.SendPropertyChanging();
					this._Image_path = value;
					this.SendPropertyChanged("Image_path");
					this.OnImage_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Address", Storage="_Addresses", ThisKey="Customer_id", OtherKey="Customer_id", IsUnique=true, IsForeignKey=false)]
		public Address Addresses
		{
			get
			{
				return this._Addresses.Entity;
			}
			set
			{
				Address previousValue = this._Addresses.Entity;
				if (((previousValue != value) 
							|| (this._Addresses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Addresses.Entity = null;
						previousValue.Customer = null;
					}
					this._Addresses.Entity = value;
					if ((value != null))
					{
						value.Customer = this;
					}
					this.SendPropertyChanged("Addresses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Orders", ThisKey="Customer_id", OtherKey="Buyer_id", IsUnique=true, IsForeignKey=false)]
		public Order Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Order previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.Customer = null;
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.Customer = this;
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Item", Storage="_Items", ThisKey="Customer_id", OtherKey="Seller_id")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_User_Login", Storage="_User_Logins", ThisKey="Customer_id", OtherKey="User_id")]
		public EntitySet<User_Login> User_Logins
		{
			get
			{
				return this._User_Logins;
			}
			set
			{
				this._User_Logins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_User_Logins(User_Login entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_User_Logins(User_Login entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Item_id;
		
		private System.Nullable<int> _Seller_id;
		
		private string _Item_name;
		
		private System.Nullable<int> _Category_id;
		
		private System.Nullable<double> _Unit_price;
		
		private System.Nullable<double> _Quantity;
		
		private string _Image_path;
		
		private string _Item_description;
		
		private EntityRef<Order> _Orders;
		
		private EntitySet<Item_rating> _Item_ratings;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItem_idChanging(int value);
    partial void OnItem_idChanged();
    partial void OnSeller_idChanging(System.Nullable<int> value);
    partial void OnSeller_idChanged();
    partial void OnItem_nameChanging(string value);
    partial void OnItem_nameChanged();
    partial void OnCategory_idChanging(System.Nullable<int> value);
    partial void OnCategory_idChanged();
    partial void OnUnit_priceChanging(System.Nullable<double> value);
    partial void OnUnit_priceChanged();
    partial void OnQuantityChanging(System.Nullable<double> value);
    partial void OnQuantityChanged();
    partial void OnImage_pathChanging(string value);
    partial void OnImage_pathChanged();
    partial void OnItem_descriptionChanging(string value);
    partial void OnItem_descriptionChanged();
    #endregion
		
		public Item()
		{
			this._Orders = default(EntityRef<Order>);
			this._Item_ratings = new EntitySet<Item_rating>(new Action<Item_rating>(this.attach_Item_ratings), new Action<Item_rating>(this.detach_Item_ratings));
			this._Customer = default(EntityRef<Customer>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Item_id
		{
			get
			{
				return this._Item_id;
			}
			set
			{
				if ((this._Item_id != value))
				{
					this.OnItem_idChanging(value);
					this.SendPropertyChanging();
					this._Item_id = value;
					this.SendPropertyChanged("Item_id");
					this.OnItem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seller_id", DbType="Int")]
		public System.Nullable<int> Seller_id
		{
			get
			{
				return this._Seller_id;
			}
			set
			{
				if ((this._Seller_id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeller_idChanging(value);
					this.SendPropertyChanging();
					this._Seller_id = value;
					this.SendPropertyChanged("Seller_id");
					this.OnSeller_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_name", DbType="VarChar(50)")]
		public string Item_name
		{
			get
			{
				return this._Item_name;
			}
			set
			{
				if ((this._Item_name != value))
				{
					this.OnItem_nameChanging(value);
					this.SendPropertyChanging();
					this._Item_name = value;
					this.SendPropertyChanged("Item_name");
					this.OnItem_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_id", DbType="Int")]
		public System.Nullable<int> Category_id
		{
			get
			{
				return this._Category_id;
			}
			set
			{
				if ((this._Category_id != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_idChanging(value);
					this.SendPropertyChanging();
					this._Category_id = value;
					this.SendPropertyChanged("Category_id");
					this.OnCategory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_price", DbType="Float")]
		public System.Nullable<double> Unit_price
		{
			get
			{
				return this._Unit_price;
			}
			set
			{
				if ((this._Unit_price != value))
				{
					this.OnUnit_priceChanging(value);
					this.SendPropertyChanging();
					this._Unit_price = value;
					this.SendPropertyChanged("Unit_price");
					this.OnUnit_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Float")]
		public System.Nullable<double> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_path", DbType="VarChar(50)")]
		public string Image_path
		{
			get
			{
				return this._Image_path;
			}
			set
			{
				if ((this._Image_path != value))
				{
					this.OnImage_pathChanging(value);
					this.SendPropertyChanging();
					this._Image_path = value;
					this.SendPropertyChanged("Image_path");
					this.OnImage_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_description", CanBeNull=false)]
		public string Item_description
		{
			get
			{
				return this._Item_description;
			}
			set
			{
				if ((this._Item_description != value))
				{
					this.OnItem_descriptionChanging(value);
					this.SendPropertyChanging();
					this._Item_description = value;
					this.SendPropertyChanged("Item_description");
					this.OnItem_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Order", Storage="_Orders", ThisKey="Item_id", OtherKey="Oider_id", IsUnique=true, IsForeignKey=false)]
		public Order Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Order previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.Item = null;
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.Item = this;
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Item_rating", Storage="_Item_ratings", ThisKey="Item_id", OtherKey="Item_id")]
		public EntitySet<Item_rating> Item_ratings
		{
			get
			{
				return this._Item_ratings;
			}
			set
			{
				this._Item_ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Item", Storage="_Customer", ThisKey="Seller_id", OtherKey="Customer_id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._Seller_id = value.Customer_id;
					}
					else
					{
						this._Seller_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item", Storage="_Category", ThisKey="Category_id", OtherKey="Category_id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._Category_id = value.Category_id;
					}
					else
					{
						this._Category_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Item_ratings(Item_rating entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Item_ratings(Item_rating entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
}
#pragma warning restore 1591
